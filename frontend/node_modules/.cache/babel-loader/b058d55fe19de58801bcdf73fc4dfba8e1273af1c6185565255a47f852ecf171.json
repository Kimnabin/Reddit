{"ast":null,"code":"var _jsxFileName = \"D:\\\\WorkJS\\\\react-redux-reddit\\\\frontend\\\\src\\\\Components\\\\Post\\\\MakePost.jsx\",\n  _s = $RefreshSig$();\nimport Input from \"../InputFields/Input\";\nimport { useState } from 'react';\nimport './post.css';\nimport { useDispatch } from \"react-redux\";\nimport { createPost } from \"../../redux/postSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MakePost = props => {\n  _s();\n  const {\n    setOpen\n  } = props;\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState('Add a title');\n  const [desc, setDesc] = useState('Add some descriptions');\n  const tags = ['None', 'NSFW', 'Mood', 'Quotes', 'Shitpost'];\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const handlePost = () => {\n    setOpen(false);\n    const newPost = {\n      title: title,\n      description: desc,\n      tag: selectedIndex\n    };\n    console.log(newPost);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"makepost-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"makepost-navigation\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"makepost-save\",\n        onClick: handlePost,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      label: \"Title\",\n      data: title,\n      setData: setTitle,\n      inputType: \"textarea\",\n      classStyle: \"makepost-title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      label: \"Descriptions\",\n      data: desc,\n      setData: setDesc,\n      inputType: \"textarea\",\n      classStyle: \"makepost-desc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"\",\n      children: \" Tags \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"makepost-tags\",\n      children: tags.map((tag, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${selectedIndex === index ? `makepost-tags-selected` : `makepost-tags-${tag}`}`,\n          onClick: () => setSelectedIndex(index),\n          children: tag\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(MakePost, \"yvF3Cw6QqTrGwYQ20Qt42xtQW+Q=\", false, function () {\n  return [useDispatch];\n});\n_c = MakePost;\nexport default MakePost;\nvar _c;\n$RefreshReg$(_c, \"MakePost\");","map":{"version":3,"names":["Input","useState","useDispatch","createPost","jsxDEV","_jsxDEV","MakePost","props","_s","setOpen","dispatch","title","setTitle","desc","setDesc","tags","selectedIndex","setSelectedIndex","handlePost","newPost","description","tag","console","log","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","label","data","setData","inputType","classStyle","htmlFor","map","index","_c","$RefreshReg$"],"sources":["D:/WorkJS/react-redux-reddit/frontend/src/Components/Post/MakePost.jsx"],"sourcesContent":["import Input from \"../InputFields/Input\";\r\nimport { useState } from 'react';\r\nimport './post.css';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { createPost } from \"../../redux/postSlice\";\r\n\r\n\r\nconst MakePost = (props) => {\r\n    const { setOpen } = props;\r\n    const dispatch = useDispatch();\r\n\r\n    const [title, setTitle] = useState('Add a title');\r\n    const [desc, setDesc] = useState('Add some descriptions');\r\n    const tags = [\r\n        'None',\r\n        'NSFW',\r\n        'Mood',\r\n        'Quotes',\r\n        'Shitpost',\r\n    ];\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n\r\n    const handlePost = () => {\r\n        setOpen(false);\r\n        const newPost = {\r\n            title: title,\r\n            description: desc,\r\n            tag: selectedIndex,\r\n        };\r\n        console.log(newPost);\r\n    }\r\n\r\n    return ( \r\n        <section className=\"makepost-container\">\r\n            <div className=\"makepost-navigation\">\r\n                <p className=\"makepost-save\" onClick={handlePost}>\r\n                    Post\r\n                </p>\r\n            </div>\r\n            <Input \r\n                label=\"Title\" \r\n                data={title} \r\n                setData={setTitle} \r\n                inputType=\"textarea\"\r\n                classStyle=\"makepost-title\"\r\n            />\r\n            <Input \r\n                label=\"Descriptions\" \r\n                data={desc} \r\n                setData={setDesc} \r\n                inputType=\"textarea\"\r\n                classStyle=\"makepost-desc\"\r\n            />\r\n            <label htmlFor=\"\"> Tags </label>\r\n            <div className=\"makepost-tags\">\r\n                {tags.map((tag, index) => {\r\n                    return (\r\n                        <button \r\n                            key={index} \r\n                            className={`${selectedIndex === index ? `makepost-tags-selected` : `makepost-tags-${tag}`}`}\r\n                            onClick={() => setSelectedIndex(index)}\r\n                        > \r\n                            { tag } \r\n                        </button>\r\n                    )\r\n                })}\r\n            </div>\r\n        </section>\r\n     );\r\n}\r\n \r\nexport default MakePost;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}